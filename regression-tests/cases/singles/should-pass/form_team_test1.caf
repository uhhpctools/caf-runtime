!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! We test the formation of teams using the FORM TEAM statement.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

program form_team_test
    use, intrinsic :: iso_fortran_env

    logical :: success
    integer :: me, ne
    integer :: val, expected_val
    type(team_type) :: tm1, tm2, tm3

    success = .true.
    me = this_image()
    ne = num_images()

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! have all images join the same team
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    form team(1, tm1)

    ! check that num_images(tm1) equals ne on all images

    expected_val = ne
    val = num_images(tm1)
    success = success .and. (val .eq. expected_val)

    if (.not. success) then
        print *, "num_images(tm1) is ", val, "; should be", expected_val
        error stop
    end if

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! have all images join the same team, with specified
    ! new indices
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    form team(1, tm2, new_index=1+mod(this_image(),num_images()))

    expected_val = 1+mod(this_image(), num_images())
    val = this_image(team=tm2)

    success = success .and. (val .eq. expected_val)

    if (.not. success) then
        print *, "this_image(team=tm2) is ", val, "; should be", expected_val
        error stop
    end if

    expected_val = ne
    val = num_images(team=tm2)

    success = success .and. (val .eq. expected_val)

    if (.not. success) then
        print *, "num_images(team=tm2) is ", val, "; should be", expected_val
        error stop
    end if

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! have every other image join the same team
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    form team(1+mod(this_image(), 2), tm3)

    if (mod(ne, 2) == 0) then
        expected_val = ne / 2
    else if (mod(me, 2) == 0) then
        expected_val = ne / 2
    else
        expected_val = ne / 2 + 1
    end if

    val = num_images(tm3)

    success = success .and. (val .eq. expected_val)

    if (.not. success) then
        print *, "num_images(tm3) is ", val, "; should be", expected_val
        error stop
    end if

    ! reached the end!

    if (success) then
        print *, "SUCCESS!"
    else
        print *, "FAILURE!"
    end if
end program
