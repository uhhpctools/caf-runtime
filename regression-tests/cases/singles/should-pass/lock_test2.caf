! Lock Test 2

! This is like lock_test.caf, except the lock and unlock statements occur in a
! separate module, and the lock is declared a global variable within that
! module.

      module utils
          use :: iso_fortran_env

          integer, private :: t1(8), t2(8)
          double precision, private :: t
          type(lock_type),private :: l[*]

          contains

          subroutine acquire_lock(p)
            integer, intent(in) :: p
            lock( l[p] )
          end subroutine

          subroutine release_lock(p)
            integer, intent(in) :: p
            unlock( l[p] )
          end subroutine

          logical function test_and_acquire_lock(p)
            integer, intent(in) :: p
            logical :: s
            lock ( l[p], acquired_lock=s)
            test_and_acquire_lock = s
          end function

#ifdef TIME_IT
          subroutine start_time()
            call date_and_time(values=t1)
          end subroutine

          subroutine end_time()
            call date_and_time(values=t2)
            t = 3600*(t2(5)-t1(5)) + 60*(t2(6)-t1(6)) + (t2(7)-t1(7))   &
                + .001*(t2(8)-t1(8))
          end subroutine

          subroutine print_time()
              print *, this_image(), ": t = ", t
          end subroutine
#else
          subroutine start_time()
          end subroutine

          subroutine end_time()
          end subroutine

          subroutine print_time()
          end subroutine
#endif

      end module

      program main
          use utils

          integer, parameter :: N = 10000
          integer :: me
          integer :: total[*]
          logical  :: success
          integer :: fail_count[*]
          integer :: fail_total

          me = this_image()
          total = 0
          fail_count = 0

          sync all

          if (me <= 4) then
              call start_time()
              do i = 1, N
              success = test_and_acquire_lock(2)
              if (success) then
                  total[2] = total[2] + 1
                  call release_lock(2)
              else
                  fail_count = fail_count + 1
              end if
              end do
              call end_time()
          end if

          sync all

          if (me <= 4) then
              call print_time()
              call flush(6)
          end if

          call co_sum(fail_count, fail_total)
          total = total[2]

          if ( total /= (4*N - fail_total) ) then
              print *, me, ": FAILURE: ", total, 4*N, fail_total
          else
              print *, me, ": SUCCESS"
          end if

      end program
