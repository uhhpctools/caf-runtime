module Kinds
  integer,parameter :: KND = kind(1.0)
end module Kinds


module Globals
 use Kinds
 implicit none
 
 integer ncom
 integer nims,nxims,nyims,nzims
 integer im,iim,jim,kim

end module Globals






module Subs
  use Kinds
  use Globals
  
  implicit none
  

  type Domain
   real(KND),dimension(:,:,:),allocatable:: A
   integer :: n=2
   integer :: starti,endi
   integer :: startj,endj
   integer :: startk,endk
   integer,dimension(:),allocatable :: startsi,startsj,startsk
   integer,dimension(:),allocatable :: endsi,endsj,endsk
  end type



 contains
  

  subroutine Boundaries(D)
    type(Domain),intent(inout) :: D[nxims,nyims,*]
    integer i

   sync all
      if (kim>1) then
       
       write(*,*) D[1,1,1]%A(2,1,1)
       
       D%A(1:2,1:2,1) =  D[1,1,1]%A(1:2,1:2,1)
           
!        D%A(2,1,1) =&
!            D[1,1,1]%A(2,1,1)

       write(*,*) D%A(2,1,1)
      end if
    sync all

  end subroutine Boundaries

  
  
end module Subs













program Jac
 use Kinds
 use Subs
 use Globals
 
 implicit none

 type(Domain),allocatable :: D[:,:,:]
 real(KND),codimension[*] :: sumA,sumB,diffAB
 real(KND) avgA,avgB
 integer i,j,k

 real(KND) workaround
 character(20):: ch

 nims = num_images()
 nxims = nint(real(nims)**(1./3.))
 nyims = nint(real(nims)**(1./3.))
 nzims = nims / (nxims*nyims)

 im = this_image()
!  if (im==1) write(*,*) "n: [",nxims,nyims,nzims,"]"

 kim = (im-1) / (nxims*nyims) + 1
 jim = ((im-1) - (kim-1)*(nxims*nyims)) / nxims + 1
 iim = (im-1) - (kim-1)*(nxims*nyims) - (jim-1)*(nxims) + 1

!  write (*,*) im,"[",iim,jim,kim,"]"

 allocate(D[nxims,nyims,*])

 allocate(D%startsi(nxims)) 
 allocate(D%startsj(nyims)) 
 allocate(D%startsk(nzims)) 
 allocate(D%endsi(nxims)) 
 allocate(D%endsj(nyims)) 
 allocate(D%endsk(nzims)) 

 D%startsi(1) = 1
 do i=2,nxims
   D%startsi(i) = D%startsi(i-1) + D%n/nxims
 end do
 D%endsi(nxims) = D%n
 D%endsi(1:nxims-1) = D%startsi(2:nxims) - 1

 D%startsj(1) = 1
 do j=2,nyims
   D%startsj(j) = D%startsj(j-1) + D%n/nyims
 end do
 D%endsj(nyims) = D%n
 D%endsj(1:nyims-1) = D%startsj(2:nyims) - 1

 D%startsk(1) = 1
 do k=2,nzims
   D%startsk(k) = D%startsk(k-1) + D%n/nzims
 end do
 D%endsk(nzims) = D%n
 D%endsk(1:nzims-1) = D%startsk(2:nzims) - 1

 D%starti = D%startsi(iim)
 D%endi = D%endsi(iim)
 D%startj = D%startsj(jim)
 D%endj = D%endsj(jim)
 D%startk = D%startsk(kim)
 D%endk = D%endsk(kim)
 

 allocate(D%A(D%starti-1:D%endi+1,D%startj-1:D%endj+1,D%startk-1:D%endk+1))
 
 D%A=0

 if (iim==nxims) then
   D%A(D%starti-1:D%endi,D%startj:D%endj,D%startk:D%endk)=1
 endif

    
 sync all

 call Boundaries(D)

 sync all


end program Jac
  
